/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin,
  mathStateField: () => mathStateField
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_language = require("@codemirror/language");
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var mathStateField = import_state.StateField.define({
  create(state) {
    return import_view.Decoration.none;
  },
  update(oldState, transaction) {
    const builder = new import_state.RangeSetBuilder();
    let mathBegin = -1;
    let mathContentBegin = -1;
    let block = false;
    (0, import_language.syntaxTree)(transaction.state).iterate({
      enter(node) {
        if (node.name.contains("formatting-math-begin")) {
          mathBegin = node.from;
          mathContentBegin = node.to;
          block = node.name.contains("math-block");
        } else if (mathBegin !== -1 && node.name.contains("formatting-math-end")) {
          if (!block) {
            const mathContentEnd = node.from;
            const mathEnd = node.to;
            const cursor = transaction.state.selection.main.head;
            let math = transaction.state.doc.sliceString(mathContentBegin, mathContentEnd);
            if (mathBegin <= cursor && cursor <= mathEnd) {
              builder.add(
                mathEnd,
                mathEnd,
                import_view.Decoration.widget({
                  widget: new import_view.WidgetType({
                    math,
                    block: true
                  }),
                  block: true
                })
              );
            }
          }
          mathBegin = -1;
          mathContentBegin = -1;
          block = false;
        }
      }
    });
    return builder.finish();
  },
  provide(field) {
    return import_view.EditorView.decorations.from(field);
  }
});
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerEditorExtension(mathStateField);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgc3ludGF4VHJlZSB9IGZyb20gXCJAY29kZW1pcnJvci9sYW5ndWFnZVwiO1xuaW1wb3J0IHsgRXh0ZW5zaW9uLCBSYW5nZVNldEJ1aWxkZXIsIFN0YXRlRmllbGQsIFRyYW5zYWN0aW9uIH0gZnJvbSBcIkBjb2RlbWlycm9yL3N0YXRlXCI7XG5pbXBvcnQgeyBEZWNvcmF0aW9uLCBEZWNvcmF0aW9uU2V0LCBFZGl0b3JWaWV3LCBXaWRnZXRUeXBlIH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcblxuZXhwb3J0IGNvbnN0IG1hdGhTdGF0ZUZpZWxkID0gU3RhdGVGaWVsZC5kZWZpbmU8RGVjb3JhdGlvblNldD4oe1xuICAgIGNyZWF0ZShzdGF0ZSk6IERlY29yYXRpb25TZXQge1xuICAgICAgICByZXR1cm4gRGVjb3JhdGlvbi5ub25lO1xuICAgIH0sXG5cbiAgICB1cGRhdGUob2xkU3RhdGU6IERlY29yYXRpb25TZXQsIHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IERlY29yYXRpb25TZXQge1xuICAgICAgICBjb25zdCBidWlsZGVyID0gbmV3IFJhbmdlU2V0QnVpbGRlcjxEZWNvcmF0aW9uPigpO1xuXG4gICAgICAgIGxldCBtYXRoQmVnaW4gPSAtMTtcbiAgICAgICAgbGV0IG1hdGhDb250ZW50QmVnaW4gPSAtMTtcbiAgICAgICAgbGV0IGJsb2NrID0gZmFsc2U7XG5cbiAgICAgICAgc3ludGF4VHJlZSh0cmFuc2FjdGlvbi5zdGF0ZSkuaXRlcmF0ZSh7XG4gICAgICAgICAgICBlbnRlcihub2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubmFtZS5jb250YWlucyhcImZvcm1hdHRpbmctbWF0aC1iZWdpblwiKSkge1xuICAgICAgICAgICAgICAgICAgICBtYXRoQmVnaW4gPSBub2RlLmZyb207XG4gICAgICAgICAgICAgICAgICAgIG1hdGhDb250ZW50QmVnaW4gPSBub2RlLnRvO1xuICAgICAgICAgICAgICAgICAgICBibG9jayA9IG5vZGUubmFtZS5jb250YWlucyhcIm1hdGgtYmxvY2tcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRoQmVnaW4gIT09IC0xICYmIG5vZGUubmFtZS5jb250YWlucyhcImZvcm1hdHRpbmctbWF0aC1lbmRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0aENvbnRlbnRFbmQgPSBub2RlLmZyb207XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRoRW5kID0gbm9kZS50bztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnNvciA9IHRyYW5zYWN0aW9uLnN0YXRlLnNlbGVjdGlvbi5tYWluLmhlYWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF0aCA9IHRyYW5zYWN0aW9uLnN0YXRlLmRvYy5zbGljZVN0cmluZyhtYXRoQ29udGVudEJlZ2luLCBtYXRoQ29udGVudEVuZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRoQmVnaW4gPD0gY3Vyc29yICYmIGN1cnNvciA8PSBtYXRoRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5hZGQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGhFbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGhFbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlY29yYXRpb24ud2lkZ2V0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZGdldDogbmV3IFdpZGdldFR5cGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGg6IG1hdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2s6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2s6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1hdGhCZWdpbiA9IC0xO1xuICAgICAgICAgICAgICAgICAgICBtYXRoQ29udGVudEJlZ2luID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYnVpbGRlci5maW5pc2goKTtcbiAgICB9LFxuXG4gICAgcHJvdmlkZShmaWVsZDogU3RhdGVGaWVsZDxEZWNvcmF0aW9uU2V0Pik6IEV4dGVuc2lvbiB7XG4gICAgICAgIHJldHVybiBFZGl0b3JWaWV3LmRlY29yYXRpb25zLmZyb20oZmllbGQpXG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJFZGl0b3JFeHRlbnNpb24obWF0aFN0YXRlRmllbGQpO1xuXHR9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBdUI7QUFDdkIsc0JBQTJCO0FBQzNCLG1CQUFvRTtBQUNwRSxrQkFBa0U7QUFFM0QsSUFBTSxpQkFBaUIsd0JBQVcsT0FBc0I7QUFBQSxFQUMzRCxPQUFPLE9BQXNCO0FBQ3pCLFdBQU8sdUJBQVc7QUFBQSxFQUN0QjtBQUFBLEVBRUEsT0FBTyxVQUF5QixhQUF5QztBQUNyRSxVQUFNLFVBQVUsSUFBSSw2QkFBNEI7QUFFaEQsUUFBSSxZQUFZO0FBQ2hCLFFBQUksbUJBQW1CO0FBQ3ZCLFFBQUksUUFBUTtBQUVaLG9DQUFXLFlBQVksS0FBSyxFQUFFLFFBQVE7QUFBQSxNQUNsQyxNQUFNLE1BQU07QUFDUixZQUFJLEtBQUssS0FBSyxTQUFTLHVCQUF1QixHQUFHO0FBQzdDLHNCQUFZLEtBQUs7QUFDakIsNkJBQW1CLEtBQUs7QUFDeEIsa0JBQVEsS0FBSyxLQUFLLFNBQVMsWUFBWTtBQUFBLFFBQzNDLFdBQVcsY0FBYyxNQUFNLEtBQUssS0FBSyxTQUFTLHFCQUFxQixHQUFHO0FBQ3RFLGNBQUksQ0FBQyxPQUFPO0FBQ1Isa0JBQU0saUJBQWlCLEtBQUs7QUFDNUIsa0JBQU0sVUFBVSxLQUFLO0FBQ3JCLGtCQUFNLFNBQVMsWUFBWSxNQUFNLFVBQVUsS0FBSztBQUNoRCxnQkFBSSxPQUFPLFlBQVksTUFBTSxJQUFJLFlBQVksa0JBQWtCLGNBQWM7QUFFN0UsZ0JBQUksYUFBYSxVQUFVLFVBQVUsU0FBUztBQUMxQyxzQkFBUTtBQUFBLGdCQUNKO0FBQUEsZ0JBQ0E7QUFBQSxnQkFDQSx1QkFBVyxPQUFPO0FBQUEsa0JBQ2QsUUFBUSxJQUFJLHVCQUFXO0FBQUEsb0JBQ25CO0FBQUEsb0JBQ0EsT0FBTztBQUFBLGtCQUNYLENBQUM7QUFBQSxrQkFDRCxPQUFPO0FBQUEsZ0JBQ1gsQ0FBQztBQUFBLGNBQ0w7QUFBQSxZQUNKO0FBQUEsVUFDSjtBQUNBLHNCQUFZO0FBQ1osNkJBQW1CO0FBQ25CLGtCQUFRO0FBQUEsUUFDWjtBQUFBLE1BQ0o7QUFBQSxJQUNKLENBQUM7QUFFRCxXQUFPLFFBQVEsT0FBTztBQUFBLEVBQzFCO0FBQUEsRUFFQSxRQUFRLE9BQTZDO0FBQ2pELFdBQU8sdUJBQVcsWUFBWSxLQUFLLEtBQUs7QUFBQSxFQUM1QztBQUNKLENBQUM7QUFFRCxJQUFxQixXQUFyQixjQUFzQyx1QkFBTztBQUFBLEVBQ3pDLE1BQU0sU0FBUztBQUNYLFNBQUssd0JBQXdCLGNBQWM7QUFBQSxFQUNsRDtBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
